/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sokol.ljetnizadatak;

import java.awt.Component;
import java.awt.Desktop;
import java.net.URI;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.text.Collator;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Sokol
 */
public class NbaBaza extends javax.swing.JFrame {

    private Connection veza;
    private PreparedStatement izraz;

    /**
     * Creates new form NbaBaza
     */
    public NbaBaza() {
        initComponents();
     

        try {
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        try {
            veza = DriverManager.getConnection("jdbc:mysql://localhost/nbastats?"
                    + "user=edunova&password=edunova&serverTimezone=CET&useUnicode=true&characterEncoding=utf-8");
            ucitajizBaze();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstLista = new javax.swing.JList<>();
        pnlPodaci = new javax.swing.JPanel();
        lblFirstName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        btnDodajNovi = new javax.swing.JButton();
        btnPromjena = new javax.swing.JButton();
        btnObriši = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstLista.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstLista.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstListaValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstLista);

        lblFirstName.setText("Name");

        lblLastName.setText("City");

        btnDodajNovi.setText("Dodaj novi");
        btnDodajNovi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajNoviActionPerformed(evt);
            }
        });

        btnPromjena.setText("Promjena");
        btnPromjena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromjenaActionPerformed(evt);
            }
        });

        btnObriši.setText("Obriši");
        btnObriši.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrišiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPodaciLayout = new javax.swing.GroupLayout(pnlPodaci);
        pnlPodaci.setLayout(pnlPodaciLayout);
        pnlPodaciLayout.setHorizontalGroup(
            pnlPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPodaciLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblFirstName)
                        .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                        .addComponent(txtCity))
                    .addGroup(pnlPodaciLayout.createSequentialGroup()
                        .addComponent(btnDodajNovi)
                        .addGap(29, 29, 29)
                        .addComponent(btnPromjena)
                        .addGap(36, 36, 36)
                        .addComponent(btnObriši)))
                .addContainerGap(181, Short.MAX_VALUE))
        );
        pnlPodaciLayout.setVerticalGroup(
            pnlPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPodaciLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                .addGroup(pnlPodaciLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDodajNovi)
                    .addComponent(btnPromjena)
                    .addComponent(btnObriši)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlPodaci, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlPodaci, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDodajNoviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajNoviActionPerformed
        try {
            izraz = veza.prepareStatement("insert into nbateam (name,city) " + " value (?,?)");
            izraz.setString(1, txtName.getText());
            izraz.setString(2, txtCity.getText());

            if (izraz.executeUpdate() == 0) {
                JOptionPane.showMessageDialog(getRootPane(), "Nije unio ni jedan red");
            } else {
                ucitajizBaze();
                ocistiPolja();
            }
            izraz.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnDodajNoviActionPerformed


    private void btnPromjenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromjenaActionPerformed
        NbaTeam nt = lstLista.getSelectedValue();
        if (nt == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberi nbateam");
            return;
        }
        try {
            NamedParameterStatement izraz = new NamedParameterStatement(veza,
                    "update nbateam set name=:name, " 
                            + "city=:city" 
                            + " where id_team=:id_team");
            izraz.setString("name", txtName.getText());
            izraz.setString("city", txtCity.getText());
            izraz.setInt("id_team", nt.getId_team());
            if(izraz.izvedi()==0){
                JOptionPane.showMessageDialog(getRootPane(), "Nije promjenjeno");
            }
            else{
                ocistiPolja();
                ucitajizBaze();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
     }//GEN-LAST:event_btnPromjenaActionPerformed

    private void btnObrišiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrišiActionPerformed
        NbaTeam nt = lstLista.getSelectedValue();
        if (nt==null) {
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberi nbateam");
            return;
        }
        try {
            izraz = veza.prepareStatement("delete from nbateam where id_team=?");
            izraz.setInt(1, nt.getId_team());
            
            if(izraz.executeUpdate()==0){
                JOptionPane.showMessageDialog(getRootPane(), "Nije ništa obrisao");
            }
            else{
                ucitajizBaze();
                ocistiPolja();
            }
            izraz.close();
        } catch (SQLIntegrityConstraintViolationException e) {
            JOptionPane.showMessageDialog(getRootPane(), "Ne možeš obrisati to jer ima grupe");
        }
        catch(SQLException ex){
            ex.printStackTrace();
        }

    }//GEN-LAST:event_btnObrišiActionPerformed

    private void lstListaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstListaValueChanged
       if(evt.getValueIsAdjusting()){
           return;
       }
       NbaTeam nt = lstLista.getSelectedValue();
       if(nt==null){
           return;
       }
       ocistiPolja();
       txtName.setText(nt.getName());
       txtCity.setText(nt.getCity());
    }//GEN-LAST:event_lstListaValueChanged

    public static void openUrl(String urlSite){
        try {
            Desktop.getDesktop().browse(new URL(urlSite).toURI());
       
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodajNovi;
    private javax.swing.JButton btnObriši;
    private javax.swing.JButton btnPromjena;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JList<NbaTeam> lstLista;
    private javax.swing.JPanel pnlPodaci;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void ocistiPolja() {

        for (Component c : pnlPodaci.getComponents()) {
            if (c instanceof JTextField) {
                ((JTextField) c).setText("");
            }
        }
    }

    private void ucitajizBaze() {
        try {
            izraz = veza.prepareStatement("select * from nbateam");
            ResultSet rs = izraz.executeQuery();
            List<NbaTeam> lista = new ArrayList<>();
            NbaTeam nt;
            while (rs.next()) {
                nt = new NbaTeam();
                nt.setId_team(rs.getInt("id_team"));
                nt.setCity(rs.getString("city"));
                nt.setName(rs.getString("name"));
                lista.add(nt);
            }
            rs.close();
            izraz.close();
            Collections.sort(lista, new Comparator<NbaTeam>() {
                Collator col = Collator.getInstance(new Locale("hr", "HR"));

                public int compare(NbaTeam nt1, NbaTeam nt2) {
                    return col.compare(nt1.getName(), nt2.getName());
                }
            });
            DefaultListModel<NbaTeam> m = new DefaultListModel<>();
            lista.forEach((nbaTeam) -> m.addElement(nbaTeam));
            lstLista.setModel(m);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
